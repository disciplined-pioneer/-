from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder
from core.bot import bot
from bot.handlers.events import generate_documents_callback
from utils.events import process_data, add_data_to_cell
from bot.keyboards.present import *

from utils.present import *
from bot.templates.present import *
from db.crud.base import *
from utils.events import process_document


router = Router()


# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "2Ô∏è‚É£ –ü–æ–¥–∞—Ä–∫–∏"
@router.callback_query(F.data == "report_gifts")
async def gifts_callback(call: CallbackQuery, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GiftReport –∏ —É—Å—Ç. —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(callback_data=call.data)
    data = await state.get_data()
    print(f"\n{data}\n")

    answers_check = data.get("answers_check", None)
    await state.update_data(answers_check=answers_check)    
    await state.set_state(GiftReport.check)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    msg = await call.message.edit_text(
        gift_purpose_question, 
        reply_markup=event_back_keyboard
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(current_question=0, answers={})
    await state.update_data(bot_message_id=msg.message_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    await state.set_state(GiftReport.awaiting_gift)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤–∑–∞–Ω–∏–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞
@router.message(GiftReport.awaiting_gift, F.text)
async def gift_message_handler(message: types.Message, state: FSMContext):

    data = await state.get_data()
    answers = data.get("answers", {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ —Å–æ–±—ã—Ç–∏–∏
    answers["event"] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await state.update_data(answers=answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await message.delete()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data["bot_message_id"],
        text=gift_recipients_prompt,
        reply_markup=back_keyboard
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    await state.set_state(GiftReport.awaiting_event)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏–∏
@router.message(GiftReport.awaiting_event, F.text)
async def event_message_handler(message: types.Message, state: FSMContext):

    data = await state.get_data()
    answers = data.get("answers", {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ —Å–æ–±—ã—Ç–∏–∏
    answers["name_gift"] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await state.update_data(answers=answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await message.delete()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data["bot_message_id"],
        text=gift_recipients_info_request,
        reply_markup=back_keyboard
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è—Ö
    await state.set_state(GiftReport.awaiting_recipient_info)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
@router.message(GiftReport.awaiting_recipient_info, F.text)
async def gifts_recipient_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    recipient_info = message.text
    answers.setdefault("gifts", []).append(recipient_info)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(answers=answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await message.delete()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data["bot_message_id"],
        text=generate_thank_you_message(recipient_info),
        reply_markup=gift_action_keyboard
    )

    data = await state.get_data()
    print(f"\n{data}\n")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üîò –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –ø–æ–¥–∞—Ä–∫–æ–≤"
@router.callback_query(GiftReport.awaiting_recipient_info, F.data == "add_gift_info")
async def add_gift_info_callback(call: CallbackQuery, state: FSMContext):

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è—Ö
    await call.message.edit_text(
        gift_recipient_info_request,
        reply_markup=event_back_keyboard
    )

    data = await state.get_data()
    print(f"\n{data}\n")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤—Å—Ç—Ä–µ—á–µ"
@router.callback_query(GiftReport.awaiting_recipient_info, F.data == "gen_documents")
async def gen_documents_callback(call: CallbackQuery, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    gifts_info = "\n".join([f"‚Ä¢ {gift}" for gift in data.get("answers", {}).get("gifts", [])])
    await call.message.edit_text(
        generate_confirmation_document_message(gifts_info),
        reply_markup=conf_keyboard
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await state.set_state(GiftReport.awaiting_document_confirmation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@router.callback_query(GiftReport.awaiting_document_confirmation, F.data == "confirm_document")
async def confirm_document_callback(call: CallbackQuery, state: FSMContext):

    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    data = await state.get_data()
    print(f'\n{data}\n')
    await call.message.edit_text(meeting_document_creation_message, reply_markup=new_expense_keyboard)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ id
    user_id = call.from_user.id
    user_obj = await get_user_data(user_id)
    user = user_obj.__dict__ if user_obj else {}

    print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—á—ë—Ç
    file_path = f"data/present_{call.from_user.id}.docx"
    doc_path = "data/present.docx"
    process_document(doc_path, data, user, file_path)


    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É excel
    result = process_data(data)
    for key, value in result.items():
        add_data_to_cell(r"data/advance_report.xlsx", key, value)
    file_path_excel = rf"data/advance_report.xlsx" 

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    file_paths = [
        file_path,
        file_path_excel
    ]

    # –°–æ–∑–¥–∞—ë–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    media_group = MediaGroupBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø—É
    for file_path in file_paths:
        file = FSInputFile(file_path)
        media_group.add_document(file)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await call.message.answer_media_group(media_group.build())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
@router.callback_query(GiftReport.awaiting_document_confirmation, F.data == "cancel_document")
async def cancel_document_callback(call: CallbackQuery, state: FSMContext):

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è—Ö
    await call.message.edit_text(
        document_addition_canceled,
        reply_markup=gift_info_keyboard
    )

    data = await state.get_data()
    print(f"\n{data}\n")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –Ω–∞ —à–∞–≥–µ –æ—Ç—á–µ—Ç–∞
@router.callback_query(F.data == "question_present_back")
async def back_callback(call: CallbackQuery, state: FSMContext):

    await state.update_data(answers={})  
    data = await state.get_data()
    print(f"\n{data}\n")
    
    current_state = await state.get_state()

    print('–ø–æ–ø–∞–ª')

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    if current_state == GiftReport.awaiting_event.state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —ç—Ç–∞–ø "check"
        await state.set_state(GiftReport.check)
        await call.message.edit_text(
            gift_purpose_question, 
            reply_markup=event_back_keyboard
        )
    elif current_state == GiftReport.awaiting_recipient_info.state:
        # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –ø–æ–¥–∞—Ä–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        await state.set_state(GiftReport.awaiting_event)
        await call.message.edit_text(
            gift_purpose_question,
            reply_markup=event_back_keyboard
        )
    elif current_state == GiftReport.awaiting_document_confirmation.state:
        # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
        if "answers" in data and "gifts" in data["answers"] and isinstance(data["answers"]["gifts"], list):
            if data["answers"]["gifts"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç –ª–∏ —Å–ø–∏—Å–æ–∫
                data["answers"]["gifts"].pop()  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(answers=data["answers"])

        await state.set_state(GiftReport.awaiting_recipient_info)
        await call.message.edit_text(
            gift_recipient_info_request,
            reply_markup=gift_info_keyboard
        )
    else:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(
            something_went_wrong,
            reply_markup=gift_info_keyboard
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@router.callback_query(F.data == "report_back_two")
async def back_callback(call: CallbackQuery, state: FSMContext):
    await state.update_data(answers={})  
    data = await state.get_data()
    print(f"\n{data}\n")

    await generate_documents_callback(call, state)