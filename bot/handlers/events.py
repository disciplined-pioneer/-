from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from core.bot import bot
from bot.keyboards.events import *
from bot.handlers.check import ReportManagement
from bot.keyboards.biznes_zavtrak import preparations_keyboard

from utils.events import  *
from bot.templates.events import *


router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å Check_photo.asking
@router.callback_query(F.data == "generate_documents")
async def generate_documents_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if data['callback_data'] == 'biznes_zavtrak_farmkruzhok':
        await call.message.edit_text(enter_template_data, 
                                     reply_markup=preparations_keyboard)
    
    elif data['callback_data'] == 'entertainment':
        await call.message.edit_text(select_document_type, 
                                     reply_markup=report_category_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "1Ô∏è‚É£ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@router.callback_query(F.data == "report_event")
@router.callback_query(F.data == "confirm")
async def event_callback(call: CallbackQuery, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ReportManagement –∏ —É—Å—Ç. —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(callback_data=call.data)
    data = await state.get_data()
    answers_check = data.get("answers_check", None)
    await state.update_data(answers_check=answers_check)    
    await state.set_state(ReportManagement.awaiting_documents)

    msg = await call.message.edit_text(questions_event['event_location'],
                                       reply_markup=event_back_keyboard)

    # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    await state.update_data(current_question=0, answers={})
    await state.update_data(bot_message_id=msg.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ü–∏–∫–ª—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
@router.message(ReportManagement.awaiting_documents, F.text)
async def ask_next_question(message: Message, state: FSMContext):
    data = await state.get_data()
    current_question = data.get("current_question", 0)
    answers = data.get("answers", {})
    participants_count = data.get("participants_count", 0)
    participants = data.get("participants", [])
    bot_message_id = data.get("bot_message_id")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    list_key = list(questions_event.keys())
    answers[list_key[current_question]] = message.text

    print(f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}\n")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if current_question + 1 < len(questions_event):
        current_question += 1
        await state.update_data(current_question=current_question, answers=answers)

        # –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ—Ç–∞
        text = questions_event[list_key[current_question]]
        if current_question == 3:
            text += f'<b>{answers["guest_name"]}</b>'

        await message.delete()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=text,
            reply_markup=event_back_keyboard,
            parse_mode="HTML"
        )
        
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≤ —Å–ø–∏—Å–æ–∫
        participants.append({
            'guest_name': answers.get('guest_name'),
            'guest_workplace': answers.get('guest_workplace')
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_count += 1
        await state.update_data(participants_count=participants_count, participants=participants)

        await message.delete()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=get_confirm_guest_addition(answers),
            reply_markup=confirmation_keyboard,
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.callback_query(ReportManagement.awaiting_documents, F.data == "question_event_back")
async def back_question(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_question = data["current_question"]
    list_key = list(questions_event.keys())

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞–∑–∞–¥
    if current_question == 0:
        await generate_documents_callback(callback, state)

    elif current_question == 3:
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        current_question = 2
        data = await state.get_data()

        await state.update_data(current_question=current_question)
        await callback.message.edit_text(questions_event[list_key[current_question]],
                                         reply_markup=event_back_keyboard)

    elif current_question > 0:
        current_question -= 1
        await state.update_data(current_question=current_question)
        await callback.message.edit_text(questions_event[list_key[current_question]],
                                         reply_markup=event_back_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîò –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
@router.callback_query(ReportManagement.awaiting_documents, F.data == "add_participant")
async def add_participant_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    participants_count = data.get("participants_count", 0)

    if participants_count >= MAX_PARTICIPANTS:
        await call.message.edit_text(max_participants_reached,
                                     reply_markup=None)
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å –§–ò–û
    await state.update_data(current_question=2,
                            participants_count=participants_count)
    
    await call.message.edit_text(questions_event['guest_name'],
                                reply_markup=event_back_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
@router.callback_query(F.data == 'confirm_action')
async def confirm_action(callback: types.CallbackQuery):
    await callback.message.edit_text(participant_added_success,
                                     reply_markup=meeting_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
@router.callback_query(F.data == 'cancel_action')
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    data = await state.get_data()
    print(f"\n{data}\n")

    participants = data.get("participants", 0)
    participants_count = data.get("participants_count", 0)

    await state.update_data(participants_count=participants_count-1,
                            participants=participants[:-1])
    
    await callback.message.edit_text(participant_addition_cancelled,
                                     reply_markup=meeting_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
@router.callback_query(F.data == 'cancel_action_two')
async def cancel_action_two(callback: CallbackQuery, state: FSMContext):
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ skip_callback
    await state.update_data(participants_count=0, participants=[])
    await skip_callback(callback, state)



# –í–û–ó–ú–û–ñ–ù–û –ü–û–ú–ï–ù–Ø–¢–¨ –ò–ú–ü–û–†–¢ –í –°–í–Ø–ó–ò –° –†–ï–ì–õ–ê–ú–ï–ù–¢–û–í
from db.crud.base import get_user_data


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤—Å—Ç—Ä–µ—á–µ"
@router.callback_query(ReportManagement.awaiting_documents, F.data == "generate_documents_tree")
async def generate_documents_tree_callback(call: CallbackQuery, state: FSMContext):
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    participants = data.get("participants", [])
    print(f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}\n")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ id
    user_id = call.from_user.id
    user_obj = await get_user_data(user_id)
    user = user_obj.__dict__ if user_obj else {}

    print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    if participants:
        message = meeting_document_created
    else:
        message = no_participants_for_document

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.edit_text(message, reply_markup=None)


    list_participants = [
        [str(i + 1), participant['guest_name'], participant['guest_workplace']]
        for i, participant in enumerate(data['participants'])
    ]
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—á—ë—Ç
    if data['callback_data'] == 'report_event':
        doc_path = "data/events_test.docx"

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—á—ë—Ç —Å–ª–æ–≤–∞–º–∏
    process_document(doc_path, data, user)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    file_path = "data/output.docx"
    doc = Document(file_path)
    
    table_list = [0, 4]
    for num_table in table_list:
        table = doc.tables[num_table]

        f = True
        for data_user in list_participants:
            if f:
                f = False
                update_last_row(table, data_user)
            else:
                add_row_with_borders(table, data_user)

    doc.save(file_path) 
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤—Å—Ç—Ä–µ—á–µ"
@router.callback_query(ReportManagement.awaiting_documents, F.data == "generate_documents_two")
async def generate_documents_callback_two(call: CallbackQuery, state: FSMContext):
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    participants = data.get("participants", [])
    print(f"\n{data}\n")

    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    if participants:

        message = generate_meeting_confirmation_message(data, participants)
        if data.get('callback_data') == 'biznes_zavtrak_farmkruzhok':
            message += f"\n\n - –ü—Ä–µ–ø–∞—Ä–∞—Ç: {data.get('selected_drug', '–ù–µ –≤—ã–±—Ä–∞–Ω')}"


    else:
        message = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    await call.message.edit_text(message, reply_markup=confirmation_keyboard_two , parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@router.callback_query(F.data == "skip")
async def skip_callback(call: CallbackQuery, state: FSMContext):

    await call.message.edit_text(advance_report_generated)

    data = await state.get_data()
    print(f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}\n")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    result = process_data(data)
    print(result)

    for key, value in result.items():
        add_data_to_cell(r"data/advance_report.xlsx", key, value)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    file_path = r"data/advance_report.xlsx" 
    file = FSInputFile(file_path)
    
    await call.message.answer_document(
        document=file,
        caption=advance_report_title
    )
