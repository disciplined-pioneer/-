import locale
import openpyxl
from datetime import datetime
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from core.bot import bot
from bot.keyboards.events import *
from bot.handlers.check import ReportManagement
from bot.keyboards.biznes_zavtrak import preparations_keyboard

router = Router()

MAX_PARTICIPANTS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –≤ —Ç–µ–∫—Å—Ç
def convert_number_to_text(number):
    # –í—ã–≤–æ–¥–∏–º —Å—É–º–º—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    currency_text = locale.currency(number, grouping=True).replace('‚ÇΩ', '')
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ
    return currency_text.replace('\xa0', ' ')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—É–º–º—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def process_data(data):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    sum_value = float(data.get("answers_check")['sum'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
    date_str = data.get("answers_check")['date']

    # Q9: –¶–µ–ª–∞—è —á–∞—Å—Ç—å –æ—Ç sum
    Q9 = int(sum_value)  # –¶–µ–ª–∞—è —á–∞—Å—Ç—å —Å—É–º–º—ã
    
    # W9: –ö–æ–ø–µ–π–∫–∏ –æ—Ç sum
    W9 = round(sum_value - Q9, 2) * 100  # –ö–æ–ø–µ–π–∫–∏ (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–∞ —Å –∫–æ–ø–µ–π–∫–∞–º–∏)

    # I13: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì'
    date_obj = datetime.strptime(date_str, '%Y%m%dT%H%M')
    I13 = date_obj.strftime('%d.%m.%y')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    # I33: –°—É–º–º–∞ (–ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º sum_value)
    I33 = sum_value
    
    # P23: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ "–†–∞—Å—Ö–æ–¥" + –º–µ—Å—è—Ü –∏ –≥–æ–¥
    date_obj_month_year = datetime.strptime(date_str, '%Y%m%dT%H%M')
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Å—è—Ü –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    P23 = f"–†–∞—Å—Ö–æ–¥ {date_obj_month_year.strftime('%B %Y').capitalize()}"
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Å—è—Ü –Ω–∞ —Ä—É—Å—Å–∫–∏–π –≤—Ä—É—á–Ω—É—é
    months = {
        'January': '–Ø–Ω–≤–∞—Ä—å', 'February': '–§–µ–≤—Ä–∞–ª—å', 'March': '–ú–∞—Ä—Ç', 'April': '–ê–ø—Ä–µ–ª—å', 
        'May': '–ú–∞–π', 'June': '–ò—é–Ω—å', 'July': '–ò—é–ª—å', 'August': '–ê–≤–≥—É—Å—Ç', 'September': '–°–µ–Ω—Ç—è–±—Ä—å', 
        'October': '–û–∫—Ç—è–±—Ä—å', 'November': '–ù–æ—è–±—Ä—å', 'December': '–î–µ–∫–∞–±—Ä—å'
    }
    P23 = P23.replace(date_obj_month_year.strftime('%B'), months[date_obj_month_year.strftime('%B')])

    # I39: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —Ç–µ–∫—Å—Ç
    rub, kop = divmod(sum_value, 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä—É–±–ª–∏ –∏ –∫–æ–ø–µ–π–∫–∏
    kop = round(kop * 100)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Ç–µ–∫—Å—Ç
    I39 = f"{convert_number_to_text(rub)} —Ä—É–±–ª–µ–π {kop} –∫–æ–ø–µ–µ–∫ ({int(rub)} —Ä—É–±. {kop} –∫–æ–ø.)"

    # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    return {
        'Q9': Q9,
        'W9': W9,
        'I13': I13,
        'I33': I33,
        'P23': P23,
        'I39': I39
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —è—á–µ–π–∫—É Excel –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
def add_data_to_cell(file_path, cell, value):

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ñ–∞–π–ª–∞
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active  # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç

    # –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
    sheet[cell] = value

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    workbook.save(file_path)



questions_event = {
    "event_location": ('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:\n\nüè¢ –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:'),
    "meeting_theme": ("üìù –¢–µ–º–∞ —Å–æ–±—Ä–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É: "),
    "guest_name": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: "),
    "guest_workplace": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: ")
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å Check_photo.asking
@router.callback_query(F.data == "generate_documents")
async def generate_documents_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if data['callback_data'] == 'biznes_zavtrak_farmkruzhok':
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:\nüíä –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ", reply_markup=preparations_keyboard)
    
    elif data['callback_data'] == 'entertainment':
        await call.message.edit_text("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ‚ú®", reply_markup=report_category_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "1Ô∏è‚É£ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@router.callback_query(F.data == "report_event")
@router.callback_query(F.data == "confirm")
async def event_callback(call: CallbackQuery, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ReportManagement –∏ —É—Å—Ç. —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    answers_check = data.get("answers_check", None)
    await state.update_data(answers_check=answers_check)    
    await state.set_state(ReportManagement.awaiting_documents)

    msg = await call.message.edit_text(questions_event['event_location'],
                                       reply_markup=event_back_keyboard)

    # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    await state.update_data(current_question=0, answers={})
    await state.update_data(bot_message_id=msg.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ü–∏–∫–ª—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
@router.message(ReportManagement.awaiting_documents, F.text)
async def ask_next_question(message: Message, state: FSMContext):
    data = await state.get_data()
    current_question = data.get("current_question", 0)
    answers = data.get("answers", {})
    participants_count = data.get("participants_count", 0)
    participants = data.get("participants", [])
    bot_message_id = data.get("bot_message_id")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    list_key = list(questions_event.keys())
    answers[list_key[current_question]] = message.text

    print(f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}\n")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if current_question + 1 < len(questions_event):
        current_question += 1
        await state.update_data(current_question=current_question, answers=answers)

        # –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ—Ç–∞
        text = questions_event[list_key[current_question]]
        if current_question == 3:
            text += f'<b>{answers["guest_name"]}</b>'

        await message.delete()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=text,
            reply_markup=event_back_keyboard,
            parse_mode="HTML"
        )
        
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≤ —Å–ø–∏—Å–æ–∫
        participants.append({
            'guest_name': answers.get('guest_name'),
            'guest_workplace': answers.get('guest_workplace')
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_count += 1
        await state.update_data(participants_count=participants_count, participants=participants)

        text = (f"üìã –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n\n‚Ä¢ –§–ò–û: <b>{answers['guest_name']}</b>"
                f"\n‚Ä¢ –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: <b>{answers['guest_workplace']}</b>"
                "\n\nü§î –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞")

        await message.delete()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=text,
            reply_markup=confirmation_keyboard,
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.callback_query(ReportManagement.awaiting_documents, F.data == "question_event_back")
async def back_question(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_question = data["current_question"]
    list_key = list(questions_event.keys())

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞–∑–∞–¥
    if current_question == 0:
        await generate_documents_callback(callback, state)

    elif current_question == 3:
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        current_question = 2
        data = await state.get_data()

        await state.update_data(current_question=current_question)
        await callback.message.edit_text(questions_event[list_key[current_question]], reply_markup=event_back_keyboard)

    elif current_question > 0:
        current_question -= 1
        await state.update_data(current_question=current_question)
        await callback.message.edit_text(questions_event[list_key[current_question]], reply_markup=event_back_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîò –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
@router.callback_query(ReportManagement.awaiting_documents, F.data == "add_participant")
async def add_participant_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    participants_count = data.get("participants_count", 0)

    if participants_count >= MAX_PARTICIPANTS:
        await call.message.edit_text("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ú–∞–∫—Å–∏–º—É–º 10 —á–µ–ª–æ–≤–µ–∫.", reply_markup=None)
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å –§–ò–û
    await state.update_data(current_question=2, participants_count=participants_count)
    msg = await call.message.edit_text(questions_event['guest_name'], reply_markup=event_back_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
@router.callback_query(F.data == 'confirm_action')
async def confirm_action(callback: types.CallbackQuery):
    message = (f"ü•≥ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
               "\n\n‚Ä¢ üîÑ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞? –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 10 —á–µ–ª–æ–≤–µ–∫")
    await callback.message.edit_text(message,
                                     reply_markup=meeting_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
@router.callback_query(F.data == 'cancel_action')
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    message = "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüîÑ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    data = await state.get_data()
    print(f"\n{data}\n")
    participants = data.get("participants", 0)
    participants_count = data.get("participants_count", 0)
    await state.update_data(participants_count=participants_count-1, participants=participants[:-1])
    await callback.message.edit_text(message, reply_markup=meeting_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
@router.callback_query(F.data == 'cancel_action_two')
async def cancel_action_two(callback: CallbackQuery, state: FSMContext):
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ skip_callback
    await state.update_data(participants_count=0, participants=[])
    await skip_callback(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤—Å—Ç—Ä–µ—á–µ"
@router.callback_query(ReportManagement.awaiting_documents, F.data == "generate_documents_tree")
async def generate_documents_tree_callback(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    participants = data.get("participants", [])
    print(f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    if participants:
        message = (
            f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ –≤—Å—Ç—Ä–µ—á–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"‚Ä¢ üìÇ –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª:\n"
            f"  ‚Ä¢ –§–∞–π–ª 1:  [–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç(–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ)]\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞, –¥–æ–±–∞–≤–∏–≤ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
            f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç?"
        )
    else:
        message = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.edit_text(message, reply_markup=None)

    # –í–†–ï–ú–ï–ù–ù–û
    await call.message.answer(f"–î–∞–Ω–Ω—ã–µ –æ —á–µ–∫–µ: {data['answers_check']}\n\n–î–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏: {data['answers']}\n\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {data['participants']}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤—Å—Ç—Ä–µ—á–µ"
@router.callback_query(ReportManagement.awaiting_documents, F.data == "generate_documents_two")
async def generate_documents_callback_two(call: CallbackQuery, state: FSMContext):
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    participants = data.get("participants", [])
    print(f"\n{data}\n")

    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    if participants:
        participants_info = "\n".join(
            [f"\t\t‚Ä¢ <b>{p['guest_name']}</b> ({p['guest_workplace']})" for p in participants]
        )
        
        message = (
            "üìÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!"
            "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:"
            f"\n\n- –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {data.get('answers', {}).get('meeting_theme', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
            f"\n\n - –¢–µ–º–∞ —Å–æ–±—Ä–∞–Ω–∏—è: {data.get('answers', {}).get('event_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
            f"\n\n - –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants_info}"
        )

        if data.get('callback_data') == 'biznes_zavtrak_farmkruzhok':
            message += f"\n\n - –ü—Ä–µ–ø–∞—Ä–∞—Ç: {data.get('selected_drug', '–ù–µ –≤—ã–±—Ä–∞–Ω')}"


    else:
        message = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    await call.message.edit_text(message, reply_markup=confirmation_keyboard_two , parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@router.callback_query(F.data == "skip")
async def skip_callback(call: CallbackQuery, state: FSMContext):
    mass_text = (f'üéâ –í–∞—à –∞–≤–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! üéâ'
                 '\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:'
                 '\n\nüîó –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç'
                 )
    await call.message.edit_text(mass_text)

    data = await state.get_data()
    print(f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}\n")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    result = process_data(data)
    print(result)

    for key, value in result.items():
        add_data_to_cell('file.xlsx', key, value)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    file_path = "file.xlsx" 
    file = FSInputFile(file_path)
    
    await call.message.answer_document(
        document=file,
        caption="–í–∞—à –∞–≤–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç üòä"
    )
