import re
from datetime import datetime
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram import F, Router, types
from bot.keyboards.foreign_expenses import *
from bot.templates.foreign_expenses import *
from core.bot import bot
from db.models.models import Check, User


router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
@router.callback_query(F.data == "expense_foreign_currency")
async def start_expense(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ExpenseState.choosing_type)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await callback.message.edit_text(
        expense_type_message,
        reply_markup=start
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    await state.update_data(last_bot_message_id=sent_message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞
@router.message(ExpenseState.choosing_type)
async def process_expense_type(message: types.Message, state: FSMContext):

    await message.delete() 
    await state.update_data(expense_type=message.text)
    await state.set_state(ExpenseState.entering_foreign_amount)

    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message_id")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    sent_message = await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_bot_message_id,
        text=foreign_amount_message,
        reply_markup=await get_back_keyboard()
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    await state.update_data(last_bot_message_id=sent_message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
@router.message(ExpenseState.entering_foreign_amount)
async def process_foreign_amount(message: types.Message, state: FSMContext):

    await message.delete()
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message_id")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
    match = re.match(r"^(\d+(\.\d+)?)\s([A-Z]{3})$", message.text.upper())
    if not match or match.group(3) not in VALID_CURRENCIES:
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=last_bot_message_id,
                text=incorrect_format_message,
                reply_markup=await get_back_keyboard()
            )
        except:
            pass

        return

    await state.update_data(foreign_amount=message.text.upper())
    await state.set_state(ExpenseState.entering_rub_amount)

    sent_message = await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_bot_message_id,
        text = (
            "üí≤ –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç:\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –≤ –æ—Ç—á–µ—Ç ( –ù–∞–ø—Ä–∏–º–µ—Ä: 7500.50 )\n"
            "–ü–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ –µ–µ –ø–æ –∫—É—Ä—Å—É –¶–ë –Ω–∞ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞ üìä"
        ),
        reply_markup=await get_back_keyboard()
    )

    await state.update_data(last_bot_message_id=sent_message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö
@router.message(ExpenseState.entering_rub_amount)
async def process_rub_amount(message: types.Message, state: FSMContext):

    await message.delete()
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message_id")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if not message.text.replace(".", "", 1).isdigit():
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=last_bot_message_id,
                text=incorrect_amount_message,
                reply_markup=await get_back_keyboard()
            )
        except:
            pass
        return

    await state.update_data(rub_amount=message.text)
    await state.set_state(ExpenseState.confirming)

    data = await state.get_data()
    sent_message = await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_bot_message_id,
        text=generate_expense_summary(data),
        reply_markup=await get_confirm_keyboard()
    )

    await state.update_data(last_bot_message_id=sent_message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
@router.callback_query(F.data == "confirm_foreign")
async def confirm_expense(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    keyboard = await get_finish_keyboard()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
    user = await User.get(tg_id=callback.from_user.id)
    await Check.create(
        user_id=user.id,
        date=datetime.utcnow(),
        sum=int(data['rub_amount'])*100,
        fn="default_fn",
        fd="default_fd",
        fp="default_fp",
        type="–†–∞—Å—Ö–æ–¥—ã –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ" + data['expense_type']
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        expense_added_message,
        reply_markup=keyboard
    )
    
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_foreign")
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == ExpenseState.entering_foreign_amount:
        await state.set_state(ExpenseState.choosing_type)
        await callback.message.edit_text(expense_type_message)

    elif current_state == ExpenseState.entering_rub_amount:
        keyboard = await get_back_keyboard()
        await state.set_state(ExpenseState.entering_foreign_amount)
        await callback.message.edit_text(
            foreign_amount_message,
            reply_markup=keyboard
        )
