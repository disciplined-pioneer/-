import locale
import openpyxl


from docx import Document
from datetime import datetime, timedelta
import math
from num2words import num2words

from docx.shared import Pt
from docx.oxml import OxmlElement, ns

MAX_PARTICIPANTS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –≤ —Ç–µ–∫—Å—Ç
def convert_number_to_text(number):

    # –í—ã–≤–æ–¥–∏–º —Å—É–º–º—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    currency_text = locale.currency(number, grouping=True).replace('‚ÇΩ', '')
    return currency_text.replace('\xa0', ' ')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—É–º–º—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def process_data(data):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    sum_value = float(data.get("answers_check")['sum']) 
    date_input = data.get("answers_check")['date']

    # Q9: –¶–µ–ª–∞—è —á–∞—Å—Ç—å –æ—Ç sum
    Q9 = int(sum_value) 
    
    # W9: –ö–æ–ø–µ–π–∫–∏ –æ—Ç sum
    W9 = round((sum_value - Q9) * 100)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥—è—â–µ–π –¥–∞—Ç—ã
    if isinstance(date_input, datetime): 
        date_obj = date_input
    else:
        try:
            date_obj = datetime.strptime(date_input, '%Y%m%dT%H%M') 
        except ValueError:
            date_obj = datetime.strptime(date_input, '%d.%m.%Y %H:%M') 

    # I13: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì'
    I13 = date_obj.strftime('%d.%m.%y') 

    # I33: –°—É–º–º–∞ (–ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º sum_value)
    I33 = sum_value

    # P23: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ "–†–∞—Å—Ö–æ–¥" + –º–µ—Å—è—Ü –∏ –≥–æ–¥
    months = {
        'January': '–Ø–Ω–≤–∞—Ä—å', 'February': '–§–µ–≤—Ä–∞–ª—å', 'March': '–ú–∞—Ä—Ç', 'April': '–ê–ø—Ä–µ–ª—å', 
        'May': '–ú–∞–π', 'June': '–ò—é–Ω—å', 'July': '–ò—é–ª—å', 'August': '–ê–≤–≥—É—Å—Ç', 'September': '–°–µ–Ω—Ç—è–±—Ä—å', 
        'October': '–û–∫—Ç—è–±—Ä—å', 'November': '–ù–æ—è–±—Ä—å', 'December': '–î–µ–∫–∞–±—Ä—å'
    }

    month_eng = date_obj.strftime('%B')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    P23 = f"–†–∞—Å—Ö–æ–¥ {months.get(month_eng, month_eng)} {date_obj.strftime('%Y')}"

    # I39: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —Ç–µ–∫—Å—Ç
    rub, kop = divmod(sum_value, 1) 
    kop = round(kop * 100)
    I39 = f"{convert_number_to_text(int(rub))} —Ä—É–±–ª–µ–π {kop} –∫–æ–ø–µ–µ–∫ ({int(rub)} —Ä—É–±. {kop} –∫–æ–ø.)"

    # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    return {
        'Q9': Q9,
        'W9': W9,
        'I13': I13,
        'I33': I33,
        'I35': I33,
        'I39': I39,
        'P23': P23
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —è—á–µ–π–∫—É Excel –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
def add_data_to_cell(file_path, cell, value):

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ñ–∞–π–ª–∞
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active  # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç

    # –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
    sheet[cell] = value

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    workbook.save(file_path)


questions_event = {
    "event_location": ('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:\n\nüè¢ –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:'),
    "meeting_theme": ("üìù –¢–µ–º–∞ —Å–æ–±—Ä–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É: "),
    "guest_name": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: "),
    "guest_workplace": ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: ")
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
def num_to_text(n):
    return num2words(n, lang='ru').replace(",", "").replace("-", " ")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
months = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö
def process_document(doc_path, data, user, file_path):

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    doc = Document(doc_path)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –æ—Ç–Ω—è—Ç–∏–µ–º 2 —á–∞—Å–æ–≤
    def subtract_hours_from_time(date_obj, hours=2):
        if isinstance(date_obj, datetime):
            new_time = date_obj - timedelta(hours=hours)
            return new_time.strftime("%H:%M")
        return ""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã
    date_compilation = data.get('answers_check', {}).get('date')
    if isinstance(date_compilation, datetime):
        date_compilation_str = f"{(date_compilation - timedelta(days=7)).day} {months[(date_compilation - timedelta(days=7)).month - 1]} {date_compilation.year} –≥."
        period_implem = f"{date_compilation.day} {months[date_compilation.month - 1]} {date_compilation.year} –≥."
    else:
        date_compilation_str = ""
        period_implem = ""

    # –ó–∞–º–µ–Ω—è–µ–º —Å—É–º–º—É (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ç—ã—Å—è—á–∏)
    sum_check = data.get('answers_check', {}).get('sum')
    if isinstance(sum_check, (int, float)):
        sum_check = math.ceil(sum_check / 1000) * 1000
        sum_check_str = f"{sum_check:,.2f}".replace(",", " ").replace('.', ',') + " —Ä—É–±–ª–µ–π"
        sum_check_text = num_to_text(sum_check).capitalize() + " —Ä—É–±–ª–µ–π 00 –∫–æ–ø–µ–µ–∫"
    else:
        sum_check_str = ""
        sum_check_text = ""

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è (–µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞)
    start_time = subtract_hours_from_time(date_compilation)
    middle_start_time = subtract_hours_from_time(date_compilation, hours=2)
    middle_end_time = subtract_hours_from_time(date_compilation, hours=1)
    end_time = subtract_hours_from_time(date_compilation, hours=2)

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
    placeholders = {
        "{date_compilation}": date_compilation_str,
        "{period_implem}": period_implem,
        "{event_location}": data.get('answers', {}).get('event_location', ""),
        "{job_title}": user.get('subdivision', ""),
        "{snp}": user.get('full_name', ""),
        "{meeting_theme}": data.get('answers', {}).get('meeting_theme', ""),
        "{sum_check}": sum_check_str,
        "{sum_check_text}": sum_check_text,
        "{start_time}": start_time,
        "{middle_start_time}": middle_start_time,
        "{middle_end_time}": middle_end_time,
        "{end_time}": end_time,
        "{name_holiday}": data.get('answers_check', {}).get('event', ""),
        "{gifts_text}": "\n".join(f"{gift}" for gift in data.get('answers', {}).get('gifts', "")),
        "{selected_drug}": data.get('selected_drug', '')
    }

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    for para in doc.paragraphs:
        for key, value in placeholders.items():
            if key in para.text:
                para.text = para.text.replace(key, value)

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–∞—Ö
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for key, value in placeholders.items():
                    if key in cell.text:
                        cell.text = cell.text.replace(key, value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    doc.save(file_path)

    print("–î–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ Word –∑–∞–º–µ–Ω–µ–Ω—ã!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü —è—á–µ–π–∫–∏
def set_cell_border(cell):
    tc = cell._element
    tc_pr = tc.get_or_add_tcPr()
    for border_name in ["top", "left", "bottom", "right"]:
        border = OxmlElement(f'w:{border_name}')
        border.set(ns.qn('w:val'), 'single')
        border.set(ns.qn('w:sz'), '6')
        border.set(ns.qn('w:space'), '0')
        border.set(ns.qn('w:color'), '000000')
        tc_pr.append(border)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
def add_row_with_borders(table, data):
    new_row = table.add_row()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    for col_idx, text in enumerate(data):
        cell = new_row.cells[col_idx]
        paragraph = cell.paragraphs[0]
        run = paragraph.add_run(text)
        run.font.size = Pt(11)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        set_cell_border(cell)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
def update_last_row(table, data):
    last_row = table.rows[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    for col_idx, text in enumerate(data):
        cell = last_row.cells[col_idx]
        cell.text = text  # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–µ
        for paragraph in cell.paragraphs:
            for run in paragraph.runs:
                run.font.size = Pt(11)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        set_cell_border(cell)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã